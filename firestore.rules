rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
        resource != null && 
        resource.data.contacts != null && 
        request.auth.uid in resource.data.contacts;
    }
    
    // Chat rules - participants can read/write
    match /chats/{chatId} {
      // Allow create if the user is in the participants list of the new chat
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Allow read/update/delete if user is in existing participants
      allow read, update, delete: if request.auth != null && 
        resource != null &&
        request.auth.uid in resource.data.participants;
      
      // Messages within chats
      match /messages/{messageId} {
        // Allow create if user is a participant in the parent chat
        allow create: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow read if user is a participant in the parent chat
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow update/delete if user is the sender or a participant
        allow update, delete: if request.auth != null && 
          (request.auth.uid == resource.data.senderId ||
           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
      }
      
      // Typing indicators within chats
      match /typing/{userId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Posts - author can write, all authenticated users can read
    match /posts/{postId} {
      allow read: if request.auth != null;
      // Allow create if user is the author
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      // Allow update/delete if user is the author
      allow update, delete: if request.auth != null && 
        resource != null &&
        request.auth.uid == resource.data.authorId;
      
      // Reactions within posts
      match /reactions/{reactionId} {
        allow read: if request.auth != null;
        // Allow create if user is the reactor
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.userId;
        // Allow update/delete if user is the reactor
        allow update, delete: if request.auth != null && 
          resource != null &&
          request.auth.uid == resource.data.userId;
      }
      
      // Comments within posts
      match /comments/{commentId} {
        allow read: if request.auth != null;
        // Allow create if user is the author
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.authorId;
        // Allow update/delete if user is the author
        allow update, delete: if request.auth != null && 
          resource != null &&
          request.auth.uid == resource.data.authorId;
      }
    }
    
    // Statuses - author can write, contacts can read
    match /statuses/{statusId} {
      // Allow create if user is the author
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.authorId;
      
      // Allow read if user is the author or in their contacts
      allow read: if request.auth != null && 
        resource != null &&
        (request.auth.uid == resource.data.authorId ||
         (exists(/databases/$(database)/documents/users/$(resource.data.authorId)) &&
          request.auth.uid in get(/databases/$(database)/documents/users/$(resource.data.authorId)).data.contacts));
      
      // Allow update/delete if user is the author
      allow update, delete: if request.auth != null && 
        resource != null &&
        request.auth.uid == resource.data.authorId;
    }
  }
}